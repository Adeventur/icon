// mojom-webui/ui/webui/resources/cr_components/customize_themes/customize_themes.mojom-webui.js is auto generated by mojom_bindings_generator.py, do not edit
// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
import { mojo } from '//resources/mojo/mojo/public/js/bindings.js';
import { SkColorSpec as skia_mojom_SkColorSpec } from 'chrome://resources/mojo/skia/public/mojom/skcolor.mojom-webui.js';
/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const ThemeTypeSpec = { $: mojo.internal.Enum() };
/**
 * @enum {number}
 */
export const ThemeType = {
    kDefault: 0,
    kAutogenerated: 1,
    kChrome: 2,
    kThirdParty: 3,
    MIN_VALUE: 0,
    MAX_VALUE: 3,
};
/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class CustomizeThemesHandlerFactoryPendingReceiver {
    /**
     * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
     */
    constructor(handle) {
        /** @public {!mojo.internal.interfaceSupport.Endpoint} */
        this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
    }
    /** @param {string=} scope */
    bindInBrowser(scope = 'context') {
        mojo.internal.interfaceSupport.bind(this.handle, 'customize_themes.mojom.CustomizeThemesHandlerFactory', scope);
    }
}
/** @interface */
export class CustomizeThemesHandlerFactoryInterface {
    /**
     * @param { !CustomizeThemesClientRemote } client
     * @param { !CustomizeThemesHandlerPendingReceiver } handler
     */
    createCustomizeThemesHandler(client, handler) { }
}
/**
 * @implements { CustomizeThemesHandlerFactoryInterface }
 */
export class CustomizeThemesHandlerFactoryRemote {
    /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
    constructor(handle = undefined) {
        /**
         * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!CustomizeThemesHandlerFactoryPendingReceiver>}
         */
        this.proxy =
            new mojo.internal.interfaceSupport.InterfaceRemoteBase(CustomizeThemesHandlerFactoryPendingReceiver, handle);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!CustomizeThemesHandlerFactoryPendingReceiver>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
    }
    /**
     * @param { !CustomizeThemesClientRemote } client
     * @param { !CustomizeThemesHandlerPendingReceiver } handler
     */
    createCustomizeThemesHandler(client, handler) {
        this.proxy.sendMessage(1605400335, CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_ParamsSpec.$, null, [
            client,
            handler
        ]);
    }
}
/**
 * An object which receives request messages for the CustomizeThemesHandlerFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CustomizeThemesHandlerFactoryReceiver {
    /**
     * @param {!CustomizeThemesHandlerFactoryInterface } impl
     */
    constructor(impl) {
        /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!CustomizeThemesHandlerFactoryRemote>} */
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(CustomizeThemesHandlerFactoryRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CustomizeThemesHandlerFactoryRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.helper_internal_.registerHandler(1605400335, CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_ParamsSpec.$, null, impl.createCustomizeThemesHandler.bind(impl));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
}
export class CustomizeThemesHandlerFactory {
    /**
     * @return {!string}
     */
    static get $interfaceName() {
        return "customize_themes.mojom.CustomizeThemesHandlerFactory";
    }
    /**
     * Returns a remote for this interface which sends messages to the browser.
     * The browser must have an interface request binder registered for this
     * interface and accessible to the calling document's frame.
     *
     * @return {!CustomizeThemesHandlerFactoryRemote}
     */
    static getRemote() {
        let remote = new CustomizeThemesHandlerFactoryRemote;
        remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
        return remote;
    }
}
/**
 * An object which receives request messages for the CustomizeThemesHandlerFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CustomizeThemesHandlerFactoryCallbackRouter {
    constructor() {
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(CustomizeThemesHandlerFactoryRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CustomizeThemesHandlerFactoryRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.createCustomizeThemesHandler =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(1605400335, CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_ParamsSpec.$, null, this.createCustomizeThemesHandler.createReceiverHandler(false /* expectsResponse */));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
    /**
     * @param {number} id An ID returned by a prior call to addListener.
     * @return {boolean} True iff the identified listener was found and removed.
     */
    removeListener(id) {
        return this.router_.removeListener(id);
    }
}
/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class CustomizeThemesHandlerPendingReceiver {
    /**
     * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
     */
    constructor(handle) {
        /** @public {!mojo.internal.interfaceSupport.Endpoint} */
        this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
    }
    /** @param {string=} scope */
    bindInBrowser(scope = 'context') {
        mojo.internal.interfaceSupport.bind(this.handle, 'customize_themes.mojom.CustomizeThemesHandler', scope);
    }
}
/** @interface */
export class CustomizeThemesHandlerInterface {
    /**
     * @param { !skia_mojom_SkColor } frameColor
     */
    applyAutogeneratedTheme(frameColor) { }
    /**
     * @param { !number } id
     */
    applyChromeTheme(id) { }
    /**
     */
    applyDefaultTheme() { }
    /**
     */
    initializeTheme() { }
    /**
     * @return {!Promise<{
          chromeThemes: !Array<!ChromeTheme>,
     *  }>}
     */
    getChromeThemes() { }
    /**
     */
    confirmThemeChanges() { }
    /**
     */
    revertThemeChanges() { }
}
/**
 * @implements { CustomizeThemesHandlerInterface }
 */
export class CustomizeThemesHandlerRemote {
    /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
    constructor(handle = undefined) {
        /**
         * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!CustomizeThemesHandlerPendingReceiver>}
         */
        this.proxy =
            new mojo.internal.interfaceSupport.InterfaceRemoteBase(CustomizeThemesHandlerPendingReceiver, handle);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!CustomizeThemesHandlerPendingReceiver>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
    }
    /**
     * @param { !skia_mojom_SkColor } frameColor
     */
    applyAutogeneratedTheme(frameColor) {
        this.proxy.sendMessage(1663109144, CustomizeThemesHandler_ApplyAutogeneratedTheme_ParamsSpec.$, null, [
            frameColor
        ]);
    }
    /**
     * @param { !number } id
     */
    applyChromeTheme(id) {
        this.proxy.sendMessage(921043740, CustomizeThemesHandler_ApplyChromeTheme_ParamsSpec.$, null, [
            id
        ]);
    }
    /**
     */
    applyDefaultTheme() {
        this.proxy.sendMessage(1813816323, CustomizeThemesHandler_ApplyDefaultTheme_ParamsSpec.$, null, []);
    }
    /**
     */
    initializeTheme() {
        this.proxy.sendMessage(242213313, CustomizeThemesHandler_InitializeTheme_ParamsSpec.$, null, []);
    }
    /**
     * @return {!Promise<{
          chromeThemes: !Array<!ChromeTheme>,
     *  }>}
     */
    getChromeThemes() {
        return this.proxy.sendMessage(377941171, CustomizeThemesHandler_GetChromeThemes_ParamsSpec.$, CustomizeThemesHandler_GetChromeThemes_ResponseParamsSpec.$, []);
    }
    /**
     */
    confirmThemeChanges() {
        this.proxy.sendMessage(1165221790, CustomizeThemesHandler_ConfirmThemeChanges_ParamsSpec.$, null, []);
    }
    /**
     */
    revertThemeChanges() {
        this.proxy.sendMessage(1419867335, CustomizeThemesHandler_RevertThemeChanges_ParamsSpec.$, null, []);
    }
}
/**
 * An object which receives request messages for the CustomizeThemesHandler
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CustomizeThemesHandlerReceiver {
    /**
     * @param {!CustomizeThemesHandlerInterface } impl
     */
    constructor(impl) {
        /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!CustomizeThemesHandlerRemote>} */
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(CustomizeThemesHandlerRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CustomizeThemesHandlerRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.helper_internal_.registerHandler(1663109144, CustomizeThemesHandler_ApplyAutogeneratedTheme_ParamsSpec.$, null, impl.applyAutogeneratedTheme.bind(impl));
        this.helper_internal_.registerHandler(921043740, CustomizeThemesHandler_ApplyChromeTheme_ParamsSpec.$, null, impl.applyChromeTheme.bind(impl));
        this.helper_internal_.registerHandler(1813816323, CustomizeThemesHandler_ApplyDefaultTheme_ParamsSpec.$, null, impl.applyDefaultTheme.bind(impl));
        this.helper_internal_.registerHandler(242213313, CustomizeThemesHandler_InitializeTheme_ParamsSpec.$, null, impl.initializeTheme.bind(impl));
        this.helper_internal_.registerHandler(377941171, CustomizeThemesHandler_GetChromeThemes_ParamsSpec.$, CustomizeThemesHandler_GetChromeThemes_ResponseParamsSpec.$, impl.getChromeThemes.bind(impl));
        this.helper_internal_.registerHandler(1165221790, CustomizeThemesHandler_ConfirmThemeChanges_ParamsSpec.$, null, impl.confirmThemeChanges.bind(impl));
        this.helper_internal_.registerHandler(1419867335, CustomizeThemesHandler_RevertThemeChanges_ParamsSpec.$, null, impl.revertThemeChanges.bind(impl));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
}
export class CustomizeThemesHandler {
    /**
     * @return {!string}
     */
    static get $interfaceName() {
        return "customize_themes.mojom.CustomizeThemesHandler";
    }
    /**
     * Returns a remote for this interface which sends messages to the browser.
     * The browser must have an interface request binder registered for this
     * interface and accessible to the calling document's frame.
     *
     * @return {!CustomizeThemesHandlerRemote}
     */
    static getRemote() {
        let remote = new CustomizeThemesHandlerRemote;
        remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
        return remote;
    }
}
/**
 * An object which receives request messages for the CustomizeThemesHandler
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CustomizeThemesHandlerCallbackRouter {
    constructor() {
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(CustomizeThemesHandlerRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CustomizeThemesHandlerRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.applyAutogeneratedTheme =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(1663109144, CustomizeThemesHandler_ApplyAutogeneratedTheme_ParamsSpec.$, null, this.applyAutogeneratedTheme.createReceiverHandler(false /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.applyChromeTheme =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(921043740, CustomizeThemesHandler_ApplyChromeTheme_ParamsSpec.$, null, this.applyChromeTheme.createReceiverHandler(false /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.applyDefaultTheme =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(1813816323, CustomizeThemesHandler_ApplyDefaultTheme_ParamsSpec.$, null, this.applyDefaultTheme.createReceiverHandler(false /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.initializeTheme =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(242213313, CustomizeThemesHandler_InitializeTheme_ParamsSpec.$, null, this.initializeTheme.createReceiverHandler(false /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.getChromeThemes =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(377941171, CustomizeThemesHandler_GetChromeThemes_ParamsSpec.$, CustomizeThemesHandler_GetChromeThemes_ResponseParamsSpec.$, this.getChromeThemes.createReceiverHandler(true /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.confirmThemeChanges =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(1165221790, CustomizeThemesHandler_ConfirmThemeChanges_ParamsSpec.$, null, this.confirmThemeChanges.createReceiverHandler(false /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.revertThemeChanges =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(1419867335, CustomizeThemesHandler_RevertThemeChanges_ParamsSpec.$, null, this.revertThemeChanges.createReceiverHandler(false /* expectsResponse */));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
    /**
     * @param {number} id An ID returned by a prior call to addListener.
     * @return {boolean} True iff the identified listener was found and removed.
     */
    removeListener(id) {
        return this.router_.removeListener(id);
    }
}
/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class CustomizeThemesClientPendingReceiver {
    /**
     * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
     */
    constructor(handle) {
        /** @public {!mojo.internal.interfaceSupport.Endpoint} */
        this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
    }
    /** @param {string=} scope */
    bindInBrowser(scope = 'context') {
        mojo.internal.interfaceSupport.bind(this.handle, 'customize_themes.mojom.CustomizeThemesClient', scope);
    }
}
/** @interface */
export class CustomizeThemesClientInterface {
    /**
     * @param { !Theme } theme
     */
    setTheme(theme) { }
}
/**
 * @implements { CustomizeThemesClientInterface }
 */
export class CustomizeThemesClientRemote {
    /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
    constructor(handle = undefined) {
        /**
         * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!CustomizeThemesClientPendingReceiver>}
         */
        this.proxy =
            new mojo.internal.interfaceSupport.InterfaceRemoteBase(CustomizeThemesClientPendingReceiver, handle);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!CustomizeThemesClientPendingReceiver>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
    }
    /**
     * @param { !Theme } theme
     */
    setTheme(theme) {
        this.proxy.sendMessage(830158378, CustomizeThemesClient_SetTheme_ParamsSpec.$, null, [
            theme
        ]);
    }
}
/**
 * An object which receives request messages for the CustomizeThemesClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CustomizeThemesClientReceiver {
    /**
     * @param {!CustomizeThemesClientInterface } impl
     */
    constructor(impl) {
        /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!CustomizeThemesClientRemote>} */
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(CustomizeThemesClientRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CustomizeThemesClientRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.helper_internal_.registerHandler(830158378, CustomizeThemesClient_SetTheme_ParamsSpec.$, null, impl.setTheme.bind(impl));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
}
export class CustomizeThemesClient {
    /**
     * @return {!string}
     */
    static get $interfaceName() {
        return "customize_themes.mojom.CustomizeThemesClient";
    }
    /**
     * Returns a remote for this interface which sends messages to the browser.
     * The browser must have an interface request binder registered for this
     * interface and accessible to the calling document's frame.
     *
     * @return {!CustomizeThemesClientRemote}
     */
    static getRemote() {
        let remote = new CustomizeThemesClientRemote;
        remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
        return remote;
    }
}
/**
 * An object which receives request messages for the CustomizeThemesClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CustomizeThemesClientCallbackRouter {
    constructor() {
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(CustomizeThemesClientRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CustomizeThemesClientRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.setTheme =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(830158378, CustomizeThemesClient_SetTheme_ParamsSpec.$, null, this.setTheme.createReceiverHandler(false /* expectsResponse */));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
    /**
     * @param {number} id An ID returned by a prior call to addListener.
     * @return {boolean} True iff the identified listener was found and removed.
     */
    removeListener(id) {
        return this.router_.removeListener(id);
    }
}
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ThemeColorsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ChromeThemeSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ThirdPartyThemeInfoSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ThemeSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CustomizeThemesHandler_ApplyAutogeneratedTheme_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CustomizeThemesHandler_ApplyChromeTheme_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CustomizeThemesHandler_ApplyDefaultTheme_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CustomizeThemesHandler_InitializeTheme_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CustomizeThemesHandler_GetChromeThemes_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CustomizeThemesHandler_GetChromeThemes_ResponseParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CustomizeThemesHandler_ConfirmThemeChanges_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CustomizeThemesHandler_RevertThemeChanges_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CustomizeThemesClient_SetTheme_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const ThemeInfoSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
mojo.internal.Struct(ThemeColorsSpec.$, 'ThemeColors', [
    mojo.internal.StructField('frame', 0, 0, skia_mojom_SkColorSpec.$, null, false /* nullable */, 0),
    mojo.internal.StructField('activeTab', 8, 0, skia_mojom_SkColorSpec.$, null, false /* nullable */, 0),
    mojo.internal.StructField('activeTabText', 16, 0, skia_mojom_SkColorSpec.$, null, false /* nullable */, 0),
], [[0, 32],]);
/**
 * @record
 */
export class ThemeColors {
    constructor() {
        /** @type { !skia_mojom_SkColor } */
        this.frame;
        /** @type { !skia_mojom_SkColor } */
        this.activeTab;
        /** @type { !skia_mojom_SkColor } */
        this.activeTabText;
    }
}
mojo.internal.Struct(ChromeThemeSpec.$, 'ChromeTheme', [
    mojo.internal.StructField('id', 0, 0, mojo.internal.Int32, 0, false /* nullable */, 0),
    mojo.internal.StructField('label', 8, 0, mojo.internal.String, null, false /* nullable */, 0),
    mojo.internal.StructField('colors', 16, 0, ThemeColorsSpec.$, null, false /* nullable */, 0),
], [[0, 32],]);
/**
 * @record
 */
export class ChromeTheme {
    constructor() {
        /** @type { !number } */
        this.id;
        /** @type { !string } */
        this.label;
        /** @type { !ThemeColors } */
        this.colors;
    }
}
mojo.internal.Struct(ThirdPartyThemeInfoSpec.$, 'ThirdPartyThemeInfo', [
    mojo.internal.StructField('id', 0, 0, mojo.internal.String, null, false /* nullable */, 0),
    mojo.internal.StructField('name', 8, 0, mojo.internal.String, null, false /* nullable */, 0),
], [[0, 24],]);
/**
 * @record
 */
export class ThirdPartyThemeInfo {
    constructor() {
        /** @type { !string } */
        this.id;
        /** @type { !string } */
        this.name;
    }
}
mojo.internal.Struct(ThemeSpec.$, 'Theme', [
    mojo.internal.StructField('type', 0, 0, ThemeTypeSpec.$, 0, false /* nullable */, 0),
    mojo.internal.StructField('info', 8, 0, ThemeInfoSpec.$, null, false /* nullable */, 0),
    mojo.internal.StructField('isForced', 4, 0, mojo.internal.Bool, false, false /* nullable */, 0),
], [[0, 32],]);
/**
 * @record
 */
export class Theme {
    constructor() {
        /** @type { !ThemeType } */
        this.type;
        /** @type { !boolean } */
        this.isForced;
        /** @type { !ThemeInfo } */
        this.info;
    }
}
mojo.internal.Struct(CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_ParamsSpec.$, 'CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params', [
    mojo.internal.StructField('client', 0, 0, mojo.internal.InterfaceProxy(CustomizeThemesClientRemote), null, false /* nullable */, 0),
    mojo.internal.StructField('handler', 8, 0, mojo.internal.InterfaceRequest(CustomizeThemesHandlerPendingReceiver), null, false /* nullable */, 0),
], [[0, 24],]);
/**
 * @record
 */
export class CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params {
    constructor() {
        /** @type { !CustomizeThemesClientRemote } */
        this.client;
        /** @type { !CustomizeThemesHandlerPendingReceiver } */
        this.handler;
    }
}
mojo.internal.Struct(CustomizeThemesHandler_ApplyAutogeneratedTheme_ParamsSpec.$, 'CustomizeThemesHandler_ApplyAutogeneratedTheme_Params', [
    mojo.internal.StructField('frameColor', 0, 0, skia_mojom_SkColorSpec.$, null, false /* nullable */, 0),
], [[0, 16],]);
/**
 * @record
 */
export class CustomizeThemesHandler_ApplyAutogeneratedTheme_Params {
    constructor() {
        /** @type { !skia_mojom_SkColor } */
        this.frameColor;
    }
}
mojo.internal.Struct(CustomizeThemesHandler_ApplyChromeTheme_ParamsSpec.$, 'CustomizeThemesHandler_ApplyChromeTheme_Params', [
    mojo.internal.StructField('id', 0, 0, mojo.internal.Int32, 0, false /* nullable */, 0),
], [[0, 16],]);
/**
 * @record
 */
export class CustomizeThemesHandler_ApplyChromeTheme_Params {
    constructor() {
        /** @type { !number } */
        this.id;
    }
}
mojo.internal.Struct(CustomizeThemesHandler_ApplyDefaultTheme_ParamsSpec.$, 'CustomizeThemesHandler_ApplyDefaultTheme_Params', [], [[0, 8],]);
/**
 * @record
 */
export class CustomizeThemesHandler_ApplyDefaultTheme_Params {
    constructor() {
    }
}
mojo.internal.Struct(CustomizeThemesHandler_InitializeTheme_ParamsSpec.$, 'CustomizeThemesHandler_InitializeTheme_Params', [], [[0, 8],]);
/**
 * @record
 */
export class CustomizeThemesHandler_InitializeTheme_Params {
    constructor() {
    }
}
mojo.internal.Struct(CustomizeThemesHandler_GetChromeThemes_ParamsSpec.$, 'CustomizeThemesHandler_GetChromeThemes_Params', [], [[0, 8],]);
/**
 * @record
 */
export class CustomizeThemesHandler_GetChromeThemes_Params {
    constructor() {
    }
}
mojo.internal.Struct(CustomizeThemesHandler_GetChromeThemes_ResponseParamsSpec.$, 'CustomizeThemesHandler_GetChromeThemes_ResponseParams', [
    mojo.internal.StructField('chromeThemes', 0, 0, mojo.internal.Array(ChromeThemeSpec.$, false), null, false /* nullable */, 0),
], [[0, 16],]);
/**
 * @record
 */
export class CustomizeThemesHandler_GetChromeThemes_ResponseParams {
    constructor() {
        /** @type { !Array<!ChromeTheme> } */
        this.chromeThemes;
    }
}
mojo.internal.Struct(CustomizeThemesHandler_ConfirmThemeChanges_ParamsSpec.$, 'CustomizeThemesHandler_ConfirmThemeChanges_Params', [], [[0, 8],]);
/**
 * @record
 */
export class CustomizeThemesHandler_ConfirmThemeChanges_Params {
    constructor() {
    }
}
mojo.internal.Struct(CustomizeThemesHandler_RevertThemeChanges_ParamsSpec.$, 'CustomizeThemesHandler_RevertThemeChanges_Params', [], [[0, 8],]);
/**
 * @record
 */
export class CustomizeThemesHandler_RevertThemeChanges_Params {
    constructor() {
    }
}
mojo.internal.Struct(CustomizeThemesClient_SetTheme_ParamsSpec.$, 'CustomizeThemesClient_SetTheme_Params', [
    mojo.internal.StructField('theme', 0, 0, ThemeSpec.$, null, false /* nullable */, 0),
], [[0, 16],]);
/**
 * @record
 */
export class CustomizeThemesClient_SetTheme_Params {
    constructor() {
        /** @type { !Theme } */
        this.theme;
    }
}
mojo.internal.Union(ThemeInfoSpec.$, 'ThemeInfo', {
    'chromeThemeId': {
        'ordinal': 0,
        'type': mojo.internal.Int32,
    },
    'autogeneratedThemeColors': {
        'ordinal': 1,
        'type': ThemeColorsSpec.$,
    },
    'thirdPartyThemeInfo': {
        'ordinal': 2,
        'type': ThirdPartyThemeInfoSpec.$,
    },
});
/**
 * @typedef { {
 *   chromeThemeId: (!number|undefined),
 *   autogeneratedThemeColors: (!ThemeColors|undefined),
 *   thirdPartyThemeInfo: (!ThirdPartyThemeInfo|undefined),
 * } }
 */
export const ThemeInfo = {};
