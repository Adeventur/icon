// mojom-webui/ui/webui/resources/js/browser_command/browser_command.mojom-webui.js is auto generated by mojom_bindings_generator.py, do not edit
// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
import { mojo } from '//resources/mojo/mojo/public/js/bindings.js';
/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const CommandSpec = { $: mojo.internal.Enum() };
/**
 * @enum {number}
 */
export const Command = {
    kUnknownCommand: 0,
    kOpenSafetyCheck: 1,
    kOpenSafeBrowsingEnhancedProtectionSettings: 2,
    kOpenFeedbackForm: 3,
    kOpenPrivacyGuide: 4,
    MIN_VALUE: 0,
    MAX_VALUE: 4,
};
/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class CommandHandlerFactoryPendingReceiver {
    /**
     * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
     */
    constructor(handle) {
        /** @public {!mojo.internal.interfaceSupport.Endpoint} */
        this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
    }
    /** @param {string=} scope */
    bindInBrowser(scope = 'context') {
        mojo.internal.interfaceSupport.bind(this.handle, 'browser_command.mojom.CommandHandlerFactory', scope);
    }
}
/** @interface */
export class CommandHandlerFactoryInterface {
    /**
     * @param { !CommandHandlerPendingReceiver } handler
     */
    createBrowserCommandHandler(handler) { }
}
/**
 * @implements { CommandHandlerFactoryInterface }
 */
export class CommandHandlerFactoryRemote {
    /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
    constructor(handle = undefined) {
        /**
         * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!CommandHandlerFactoryPendingReceiver>}
         */
        this.proxy =
            new mojo.internal.interfaceSupport.InterfaceRemoteBase(CommandHandlerFactoryPendingReceiver, handle);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!CommandHandlerFactoryPendingReceiver>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
    }
    /**
     * @param { !CommandHandlerPendingReceiver } handler
     */
    createBrowserCommandHandler(handler) {
        this.proxy.sendMessage(1748202326, CommandHandlerFactory_CreateBrowserCommandHandler_ParamsSpec.$, null, [
            handler
        ]);
    }
}
/**
 * An object which receives request messages for the CommandHandlerFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CommandHandlerFactoryReceiver {
    /**
     * @param {!CommandHandlerFactoryInterface } impl
     */
    constructor(impl) {
        /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!CommandHandlerFactoryRemote>} */
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(CommandHandlerFactoryRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CommandHandlerFactoryRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.helper_internal_.registerHandler(1748202326, CommandHandlerFactory_CreateBrowserCommandHandler_ParamsSpec.$, null, impl.createBrowserCommandHandler.bind(impl));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
}
export class CommandHandlerFactory {
    /**
     * @return {!string}
     */
    static get $interfaceName() {
        return "browser_command.mojom.CommandHandlerFactory";
    }
    /**
     * Returns a remote for this interface which sends messages to the browser.
     * The browser must have an interface request binder registered for this
     * interface and accessible to the calling document's frame.
     *
     * @return {!CommandHandlerFactoryRemote}
     */
    static getRemote() {
        let remote = new CommandHandlerFactoryRemote;
        remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
        return remote;
    }
}
/**
 * An object which receives request messages for the CommandHandlerFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CommandHandlerFactoryCallbackRouter {
    constructor() {
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(CommandHandlerFactoryRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CommandHandlerFactoryRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.createBrowserCommandHandler =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(1748202326, CommandHandlerFactory_CreateBrowserCommandHandler_ParamsSpec.$, null, this.createBrowserCommandHandler.createReceiverHandler(false /* expectsResponse */));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
    /**
     * @param {number} id An ID returned by a prior call to addListener.
     * @return {boolean} True iff the identified listener was found and removed.
     */
    removeListener(id) {
        return this.router_.removeListener(id);
    }
}
/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class CommandHandlerPendingReceiver {
    /**
     * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
     */
    constructor(handle) {
        /** @public {!mojo.internal.interfaceSupport.Endpoint} */
        this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
    }
    /** @param {string=} scope */
    bindInBrowser(scope = 'context') {
        mojo.internal.interfaceSupport.bind(this.handle, 'browser_command.mojom.CommandHandler', scope);
    }
}
/** @interface */
export class CommandHandlerInterface {
    /**
     * @param { !Command } commandId
     * @return {!Promise<{
          canExecute: !boolean,
     *  }>}
     */
    canExecuteCommand(commandId) { }
    /**
     * @param { !Command } commandId
     * @param { !ClickInfo } clickInfo
     * @return {!Promise<{
          commandExecuted: !boolean,
     *  }>}
     */
    executeCommand(commandId, clickInfo) { }
}
/**
 * @implements { CommandHandlerInterface }
 */
export class CommandHandlerRemote {
    /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
    constructor(handle = undefined) {
        /**
         * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!CommandHandlerPendingReceiver>}
         */
        this.proxy =
            new mojo.internal.interfaceSupport.InterfaceRemoteBase(CommandHandlerPendingReceiver, handle);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!CommandHandlerPendingReceiver>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
    }
    /**
     * @param { !Command } commandId
     * @return {!Promise<{
          canExecute: !boolean,
     *  }>}
     */
    canExecuteCommand(commandId) {
        return this.proxy.sendMessage(1476038697, CommandHandler_CanExecuteCommand_ParamsSpec.$, CommandHandler_CanExecuteCommand_ResponseParamsSpec.$, [
            commandId
        ]);
    }
    /**
     * @param { !Command } commandId
     * @param { !ClickInfo } clickInfo
     * @return {!Promise<{
          commandExecuted: !boolean,
     *  }>}
     */
    executeCommand(commandId, clickInfo) {
        return this.proxy.sendMessage(1576306762, CommandHandler_ExecuteCommand_ParamsSpec.$, CommandHandler_ExecuteCommand_ResponseParamsSpec.$, [
            commandId,
            clickInfo
        ]);
    }
}
/**
 * An object which receives request messages for the CommandHandler
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CommandHandlerReceiver {
    /**
     * @param {!CommandHandlerInterface } impl
     */
    constructor(impl) {
        /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!CommandHandlerRemote>} */
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(CommandHandlerRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CommandHandlerRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.helper_internal_.registerHandler(1476038697, CommandHandler_CanExecuteCommand_ParamsSpec.$, CommandHandler_CanExecuteCommand_ResponseParamsSpec.$, impl.canExecuteCommand.bind(impl));
        this.helper_internal_.registerHandler(1576306762, CommandHandler_ExecuteCommand_ParamsSpec.$, CommandHandler_ExecuteCommand_ResponseParamsSpec.$, impl.executeCommand.bind(impl));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
}
export class CommandHandler {
    /**
     * @return {!string}
     */
    static get $interfaceName() {
        return "browser_command.mojom.CommandHandler";
    }
    /**
     * Returns a remote for this interface which sends messages to the browser.
     * The browser must have an interface request binder registered for this
     * interface and accessible to the calling document's frame.
     *
     * @return {!CommandHandlerRemote}
     */
    static getRemote() {
        let remote = new CommandHandlerRemote;
        remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
        return remote;
    }
}
/**
 * An object which receives request messages for the CommandHandler
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CommandHandlerCallbackRouter {
    constructor() {
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(CommandHandlerRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CommandHandlerRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.canExecuteCommand =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(1476038697, CommandHandler_CanExecuteCommand_ParamsSpec.$, CommandHandler_CanExecuteCommand_ResponseParamsSpec.$, this.canExecuteCommand.createReceiverHandler(true /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.executeCommand =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(1576306762, CommandHandler_ExecuteCommand_ParamsSpec.$, CommandHandler_ExecuteCommand_ResponseParamsSpec.$, this.executeCommand.createReceiverHandler(true /* expectsResponse */));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
    /**
     * @param {number} id An ID returned by a prior call to addListener.
     * @return {boolean} True iff the identified listener was found and removed.
     */
    removeListener(id) {
        return this.router_.removeListener(id);
    }
}
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const ClickInfoSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CommandHandlerFactory_CreateBrowserCommandHandler_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CommandHandler_CanExecuteCommand_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CommandHandler_CanExecuteCommand_ResponseParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CommandHandler_ExecuteCommand_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CommandHandler_ExecuteCommand_ResponseParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
mojo.internal.Struct(ClickInfoSpec.$, 'ClickInfo', [
    mojo.internal.StructField('middleButton', 0, 0, mojo.internal.Bool, false, false /* nullable */, 0),
    mojo.internal.StructField('altKey', 0, 1, mojo.internal.Bool, false, false /* nullable */, 0),
    mojo.internal.StructField('ctrlKey', 0, 2, mojo.internal.Bool, false, false /* nullable */, 0),
    mojo.internal.StructField('metaKey', 0, 3, mojo.internal.Bool, false, false /* nullable */, 0),
    mojo.internal.StructField('shiftKey', 0, 4, mojo.internal.Bool, false, false /* nullable */, 0),
], [[0, 16],]);
/**
 * @record
 */
export class ClickInfo {
    constructor() {
        /** @type { !boolean } */
        this.middleButton;
        /** @type { !boolean } */
        this.altKey;
        /** @type { !boolean } */
        this.ctrlKey;
        /** @type { !boolean } */
        this.metaKey;
        /** @type { !boolean } */
        this.shiftKey;
    }
}
mojo.internal.Struct(CommandHandlerFactory_CreateBrowserCommandHandler_ParamsSpec.$, 'CommandHandlerFactory_CreateBrowserCommandHandler_Params', [
    mojo.internal.StructField('handler', 0, 0, mojo.internal.InterfaceRequest(CommandHandlerPendingReceiver), null, false /* nullable */, 0),
], [[0, 16],]);
/**
 * @record
 */
export class CommandHandlerFactory_CreateBrowserCommandHandler_Params {
    constructor() {
        /** @type { !CommandHandlerPendingReceiver } */
        this.handler;
    }
}
mojo.internal.Struct(CommandHandler_CanExecuteCommand_ParamsSpec.$, 'CommandHandler_CanExecuteCommand_Params', [
    mojo.internal.StructField('commandId', 0, 0, CommandSpec.$, 0, false /* nullable */, 0),
], [[0, 16],]);
/**
 * @record
 */
export class CommandHandler_CanExecuteCommand_Params {
    constructor() {
        /** @type { !Command } */
        this.commandId;
    }
}
mojo.internal.Struct(CommandHandler_CanExecuteCommand_ResponseParamsSpec.$, 'CommandHandler_CanExecuteCommand_ResponseParams', [
    mojo.internal.StructField('canExecute', 0, 0, mojo.internal.Bool, false, false /* nullable */, 0),
], [[0, 16],]);
/**
 * @record
 */
export class CommandHandler_CanExecuteCommand_ResponseParams {
    constructor() {
        /** @type { !boolean } */
        this.canExecute;
    }
}
mojo.internal.Struct(CommandHandler_ExecuteCommand_ParamsSpec.$, 'CommandHandler_ExecuteCommand_Params', [
    mojo.internal.StructField('commandId', 0, 0, CommandSpec.$, 0, false /* nullable */, 0),
    mojo.internal.StructField('clickInfo', 8, 0, ClickInfoSpec.$, null, false /* nullable */, 0),
], [[0, 24],]);
/**
 * @record
 */
export class CommandHandler_ExecuteCommand_Params {
    constructor() {
        /** @type { !Command } */
        this.commandId;
        /** @type { !ClickInfo } */
        this.clickInfo;
    }
}
mojo.internal.Struct(CommandHandler_ExecuteCommand_ResponseParamsSpec.$, 'CommandHandler_ExecuteCommand_ResponseParams', [
    mojo.internal.StructField('commandExecuted', 0, 0, mojo.internal.Bool, false, false /* nullable */, 0),
], [[0, 16],]);
/**
 * @record
 */
export class CommandHandler_ExecuteCommand_ResponseParams {
    constructor() {
        /** @type { !boolean } */
        this.commandExecuted;
    }
}
